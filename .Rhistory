summary(data)
data = read.csv("train.csv", header = TRUE)
names(data)
summary(data)
library(arules)
class(Groceries)
library(arules)
library("arulesViz")
install.packages("arulesViz", type = "source")
install.packages("arules", type = "source")
library("arulesViz")
aasd
data
library("arulesViz")
rules <- apriori(titanic.raw)
inspect(rules)
library("arulesViz")
install.packages("arulesViz", type = "source")
install.packages("arules", type = "source")
install.packages("arules", type = "source")
install.packages("arules", type = "source")
options(download.file.method ="wget")
install.packages("arules", type = "source")
install.packages("arules", type = "source")
install.packages("arules", type = "source")
clear
clean
rules <- apriori(titanic)
library(arules)
library(arulesViz)
titanic = read.csv("train.csv", header = TRUE)
titanic<- data.frame(sapply(titanic,as.factor))
rules <- apriori(titanic)
inspect(rules)
library(arules)
library(arulesViz)
titanic = read.csv("train.csv", header = TRUE)
titanic<- data.frame(sapply(titanic,as.factor))
rules <- apriori(titanic)
inspect(rules)
rules <- apriori(titanic,parameter=list(minlen=2, supp=0.005, conf=0.8),appearance=list(rhs=c("Survived=0", "Survived=1"),default="lhs"),control=list(verbose=F))
rules.sorted <- sort(rules, by="lift")
subset.matrix <- is.subset(rules.sorted, rules.sorted, sparse = FALSE)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
rules.pruned <- rules.sorted[!redundant]
plot(rules)
plot(rules)
plot(rules)
library(arules)
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"))
library(arules)
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"), max = 100)
plot(rules, method="graph", control=list(type="items"), max = 10)
plot(rules, method="graph", control=list(type="items"), max = 1)
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"), max = 25)
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="graph", control=list(type="items"), max=10)
plot(rules, method="graph", control=list(type="items"), max=1)
plot(rules, method="graph", control=list(type="items"))
plot(rules.pruned)
plot(rules.pruned, method="graph", control=list(type="items"))
plot(rules.pruned)
plot(rules.pruned)
plot(rules.pruned, method="graph", control=list(type="items"))
plot(rules, method="paracoord", control=list(reorder=TRUE))
plot(rules, method="paracoord", control=list(reorder=TRUE), max=10)
plot(rules, method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned)
plot(rules.pruned, method="graph", control=list(type="items"))
plot(rules.pruned[1:50], method="graph", control=list(type="items"))
plot(rules.pruned[1:50], method="graph", control=list(type="items"))
plot(rules.pruned[1:50], method="graph", control=list(type="items"))
plot(rules.pruned[1:100], method="graph", control=list(type="items"))
plot(rules.pruned[1:10], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:100], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:50], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:50], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:10], method="graph", control=list(type="items"))
plot(rules.pruned[1:50], method="graph", control=list(type="items"))
plot(rules.pruned[1:100], method="graph", control=list(type="items"))
plot(rules.pruned[1:20], method="graph", control=list(type="items"))
plot(rules.pruned[1:10], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:20], method="paracoord", control=list(reorder=TRUE))
plot(rules.pruned[1:50], method="paracoord", control=list(reorder=TRUE))
library(arules)
library(arulesViz)
titanic = read.csv("train.csv", header = TRUE)
titanic<- data.frame(sapply(titanic,as.factor))
rules <- apriori(titanic)
inspect(rules)
rules <- apriori(titanic)
inspect(rules[1:20])
rules <- apriori(titanic,parameter=list(minlen=2, supp=0.005, conf=0.8),appearance=list(rhs=c("Survived=0", "Survived=1"),default="lhs"),control=list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted[20])
rules <- apriori(titanic,parameter=list(minlen=2, supp=0.005, conf=0.8),appearance=list(rhs=c("Survived=0", "Survived=1"),default="lhs"),control=list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted[1:20])
rules <- apriori(titanic,parameter=list(minlen=2, supp=0.005, conf=0.8),appearance=list(rhs=c("Survived=0", "Survived=1"),default="lhs"),control=list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted[1:50])
rules <- apriori(titanic,parameter=list(minlen=2, supp=0.005, conf=0.8),appearance=list(rhs=c("Survived=0", "Survived=1"),default="lhs"),control=list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted[1:20])
subset.matrix <- is.subset(rules.sorted, rules.sorted, sparse = FALSE)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
subset.matrix <- is.subset(rules.sorted, rules.sorted, sparse = FALSE)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant[1:20])
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned[1:20])
inspect(rules.sorted)
inspect(rules.sorted)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned[1:500])
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned[1:20])
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned[1:100])
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned[1:20])
rules <- apriori(titanic, parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
inspect(rules[1:20])
rules <- apriori(titanic, parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
inspect(rules)
rules <- apriori(titanic, parameter = list(supp = 0.9, conf = 0.9, target = "rules"))
inspect(rules)
rules <- apriori(titanic, parameter = list(supp = 0.5, conf = 0.5, target = "rules"))
inspect(rules)
rules <- apriori(titanic, parameter = list(supp = 0.5, conf = 0.6, target = "rules"))
inspect(rules)
rules <- apriori(titanic, parameter = list(supp = 0.8, conf = 0.6, target = "rules"))
inspect(rules)
rules <- apriori(titanic, parameter = list(supp = 0.3, conf = 0.3, target = "rules"))
inspect(rules)
data$Age
titanic$Age
titanic$Fare
plot(titanic$Fare)
titanic<- data.frame(sapply(titanic,as.factor))
titanic$Ticket <- NULL
titanic = read.csv("train.csv", header = TRUE)
titanic$Age <- cut(titanic$Age, breaks = c(0,10,20,30,40,60,max(titanic$Age)),labels = c("0-10","10-20","30-40","40-60","60+"), include.lowest = TRUE)
titanic$Fare <- cut(titanic$Fare, breaks = c(0,5,10,15,max(titanic$Fare)),labels = c("0-5","5-10","10-15","15+"), include.lowest = TRUE)
titanic$Ticket <- NULL
titanic
names(titanic)
titanic = read.csv("train.csv", header = TRUE)
titanic$Age <- cut(titanic$Age, breaks = c(0,10,20,30,40,60,max(titanic$Age)),labels = c("0-10","10-20","30-40","40-60","60+"), include.lowest = TRUE)
titanic$Fare <- cut(titanic$Fare, breaks = c(0,5,10,15,max(titanic$Fare)),labels = c("0-5","5-10","10-15","15+"), include.lowest = TRUE)
titanic$Ticket
train = read.csv("train.csv", header = TRUE)
names(train)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv("../input/train.csv")
test <- read.csv("../input/test.csv")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv("../input/train.csv")
test <- read.csv("../input/test.csv")
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
plot(decision_tree)
text(decision_tree)
plot(decision_tree)
text(decision_tree)
fancyRpartPlot(my_tree_two)
fancyRpartPlot(decision_tree)
fancyRpartPlot(decision_tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv("../input/train.csv")
train <- read.csv("../input_files/train.csv")
test <- read.csv("../input_files/test.csv")
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
fancyRpartPlot(decision_tree)
train <- read.csv("../../input_files/train.csv")
train <- read.csv("input_files/train.csv")
train <- read.csv("input_files/train.csv")
test <- read.csv("input_files/test.csv")
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
fancyRpartPlot(decision_tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv("input_files/train.csv")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv("input_files/train.csv")
train <- read.csv("input_files/train.csv")
test <- read.csv("input_files/test.csv")
train <- read.csv("input_files/train.csv")
test <- read.csv("input_files/test.csv")
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
fancyRpartPlot(decision_tree)
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
fancyRpartPlot(decision_tree)
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
fancyRpartPlot(decision_tree)
